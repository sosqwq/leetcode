#include <iostream>
#include <vector>
#include <cstring> 
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <stack>
#include <queue>

using namespace std;

struct TreeNode
{
   int val;
   TreeNode* left;
   TreeNode* right;
   TreeNode():val(0),left(nullptr),right(nullptr){}

};

class Solution {
    public:
        vector<double> averageOfLevels(TreeNode* root) {
            queue<TreeNode*> que;
            vector<double> result;
            if(root!= NULL) que.push(root);

            while (!que.empty()){
                vector<double> vec;
                int size = que.size();
                int average_size = que.size();

                double sum =0;
                while(size--){
                    TreeNode* node;
                    node = que.front();
                    sum += node->val;
                    que.pop();

                    if(node->left) que.push(node-> left);
                    if(node -> right) que.push(node-> right);
                }
                result.push_back(sum/average_size);
            }
            return result;
        }
    };